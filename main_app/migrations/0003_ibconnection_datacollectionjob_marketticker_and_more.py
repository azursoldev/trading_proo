# Generated by Django 5.2 on 2025-09-01 10:26

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main_app', '0002_newsanalysis_tradingrecommendation_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='IBConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('host', models.CharField(default='127.0.0.1', max_length=100)),
                ('port', models.IntegerField(default=7497)),
                ('client_id', models.IntegerField(default=1)),
                ('status', models.CharField(choices=[('disconnected', 'Disconnected'), ('connecting', 'Connecting'), ('connected', 'Connected'), ('error', 'Error')], default='disconnected', max_length=20)),
                ('last_connected', models.DateTimeField(blank=True, null=True)),
                ('last_disconnected', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('auto_reconnect', models.BooleanField(default=True)),
                ('timeout', models.IntegerField(default=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='DataCollectionJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_type', models.CharField(choices=[('realtime', 'Real-time Data'), ('historical', 'Historical Data'), ('ticker_info', 'Ticker Information'), ('market_scan', 'Market Scan')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('tickers', models.JSONField(blank=True, default=list)),
                ('timeframe', models.CharField(blank=True, max_length=10, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('total_items', models.IntegerField(default=0)),
                ('processed_items', models.IntegerField(default=0)),
                ('successful_items', models.IntegerField(default=0)),
                ('failed_items', models.IntegerField(default=0)),
                ('results', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', '-created_at'], name='main_app_da_status_975f76_idx'), models.Index(fields=['job_type', 'status'], name='main_app_da_job_typ_96db02_idx')],
            },
        ),
        migrations.CreateModel(
            name='MarketTicker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(db_index=True, max_length=20)),
                ('exchange', models.CharField(choices=[('SMART', 'SMART'), ('NASDAQ', 'NASDAQ'), ('NYSE', 'NYSE'), ('AMEX', 'AMEX'), ('ARCA', 'ARCA'), ('BATS', 'BATS'), ('IEX', 'IEX'), ('OTC', 'OTC')], default='SMART', max_length=10)),
                ('security_type', models.CharField(choices=[('STK', 'Stock'), ('OPT', 'Option'), ('FUT', 'Future'), ('IND', 'Index'), ('FOP', 'Future Option'), ('CASH', 'Cash'), ('BAG', 'Bag'), ('WAR', 'Warrant'), ('BOND', 'Bond'), ('CMDTY', 'Commodity'), ('NEWS', 'News'), ('FUND', 'Fund')], default='STK', max_length=10)),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan')], default='USD', max_length=5)),
                ('company_name', models.CharField(blank=True, max_length=200, null=True)),
                ('sector', models.CharField(blank=True, max_length=100, null=True)),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('market_cap', models.BigIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_tradable', models.BooleanField(default=True)),
                ('min_tick', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('lot_size', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_price_update', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['symbol'],
                'indexes': [models.Index(fields=['symbol', 'exchange'], name='main_app_ma_symbol_aedd3a_idx'), models.Index(fields=['sector', 'industry'], name='main_app_ma_sector_006acc_idx'), models.Index(fields=['is_active', 'is_tradable'], name='main_app_ma_is_acti_b909cb_idx')],
                'unique_together': {('symbol', 'exchange', 'security_type', 'currency')},
            },
        ),
        migrations.CreateModel(
            name='MarketData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid_price', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('ask_price', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('last_price', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('close_price', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('open_price', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('high_price', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('low_price', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('volume', models.BigIntegerField(blank=True, null=True)),
                ('avg_volume', models.BigIntegerField(blank=True, null=True)),
                ('bid_size', models.IntegerField(blank=True, null=True)),
                ('ask_size', models.IntegerField(blank=True, null=True)),
                ('last_size', models.IntegerField(blank=True, null=True)),
                ('price_change', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('price_change_percent', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('spread', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('market_timestamp', models.DateTimeField(blank=True, null=True)),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_data', to='main_app.marketticker')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['ticker', '-timestamp'], name='main_app_ma_ticker__78aa07_idx'), models.Index(fields=['-timestamp'], name='main_app_ma_timesta_f054ff_idx'), models.Index(fields=['ticker', 'market_timestamp'], name='main_app_ma_ticker__4c7114_idx')],
            },
        ),
        migrations.CreateModel(
            name='HistoricalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timeframe', models.CharField(choices=[('1min', '1 Minute'), ('5min', '5 Minutes'), ('15min', '15 Minutes'), ('30min', '30 Minutes'), ('1hour', '1 Hour'), ('1day', '1 Day'), ('1week', '1 Week'), ('1month', '1 Month')], default='1day', max_length=10)),
                ('open_price', models.DecimalField(decimal_places=4, max_digits=12)),
                ('high_price', models.DecimalField(decimal_places=4, max_digits=12)),
                ('low_price', models.DecimalField(decimal_places=4, max_digits=12)),
                ('close_price', models.DecimalField(decimal_places=4, max_digits=12)),
                ('volume', models.BigIntegerField()),
                ('adjusted_close', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('weighted_average_price', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('bar_time', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historical_data', to='main_app.marketticker')),
            ],
            options={
                'ordering': ['-bar_time'],
                'indexes': [models.Index(fields=['ticker', 'timeframe', '-bar_time'], name='main_app_hi_ticker__6f2769_idx'), models.Index(fields=['ticker', 'bar_time'], name='main_app_hi_ticker__6b9bd9_idx'), models.Index(fields=['timeframe', '-bar_time'], name='main_app_hi_timefra_8187ca_idx')],
                'unique_together': {('ticker', 'timeframe', 'bar_time')},
            },
        ),
    ]
